"""
MIT License

Copyright (c) 2021 ValkyriaKing711

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


A script for sorting a given Spotify playlist by artist name, album name, then
finally by the track's position in its album.

For example, the following list of tracks (artist - track - album):
Rav - DEVILMAN - DEVILMAN
Rav - Addlerall - Beneath the Toxic Jungle
Gvllow - Johnny Cash - Gvllow
Rav - Solanine - Beneath the Toxic Jungle
Ghostemane - AI - ANTI-ICON

becomes the following, sorting criteria in parentheses:
Ghostemane - AI - ANTI-ICON (artist name)
Gvllow - Johnny Cash - Gvllow (artist name)
Rav - Solanine - Beneath the Toxic Jungle (artist name, album name, track #2)
Rav - Addlerall - Beneath the Toxic Jungle (above, but track #5 in album)
Rav - DEVILMAN - DEVILMAN (artist name, album name)
"""
import webbrowser
import asyncio
import re
from base64 import b64encode
from typing import Tuple
from urllib import parse
from aiohttp import ClientSession
from spotify import Client, HTTPException, SpotifyException, Track, User

from credentials import CLIENT_ID, CLIENT_SECRET, REDIRECT_URI
from server import Server

AUTH_FILE_TEMPLATE = "--DO NOT EDIT THIS FILE--\n{}"
AUTH_URL_TEMPLATE = "https://accounts.spotify.com/authorize" \
                    "?client_id={}&response_type={}&redirect_uri={}&scope={}"
TOKEN_URL = "https://accounts.spotify.com/api/token"
SCOPES = [
    "playlist-modify-public",
    "playlist-modify-private",
    "playlist-read-private",
    "playlist-read-collaborative"
]

CODE_REGEX = re.compile(r"https?://[\w./:&?]+code=([^&\s]+)&?.*")
URI_REGEX = re.compile(r"spotify:playlist:([A-Za-z0-9]+)")

WB = Server()


async def do_authorization_flow(client: Client) -> User:
    """Either authorizes the application with an existing refresh token or
       in case of failure, handles the full authorization flow from the start.
    """
    client_secret = client.http.client_secret
    basic_auth = b64encode(f"{client.id}:{client_secret}".encode()).decode()
    headers = {"Authorization": f"Basic {basic_auth}"}
    session = ClientSession()

    # try loading a previous refresh token and authorizing using that
    try:
        with open("auth", "r", encoding="utf-8") as file:
            r_token = file.read().split("\n")[1].strip()

        print("Found existing refresh token, trying to authorize...")

        try:
            data = {"grant_type": "refresh_token", "refresh_token": r_token}
            async with session.post(
                TOKEN_URL, headers=headers, data=data
            ) as resp:
                resp_data = await resp.json()
                token = resp_data["access_token"]
                await session.close()
                return await User.from_token(client, token, r_token)

        except (KeyError, SpotifyException) as exc:
            print("Failed to authorize with refresh token.\n")
            raise exc

    except (IOError, KeyError, SpotifyException) as exc:
        pass

    # building the URL and quoting only what's necessary, like spaces
    url = parse.quote(
        AUTH_URL_TEMPLATE.format(
            client.id,
            "code",
            REDIRECT_URI,
            " ".join(SCOPES)
        ),
        safe="/?&=:_"
    )

    webbrowser.open(url)
    await loop.create_task(WB.create_server())

    data = {
        "grant_type": "authorization_code",
        "code": WB.code,
        "redirect_uri": REDIRECT_URI
    }

    async with session.post(TOKEN_URL, headers=headers, data=data) as resp:
        resp_data = await resp.json()
        resp.close()

    token, r_token = resp_data["access_token"], resp_data["refresh_token"]

    await loop.create_task(WB.close_server())

    try:
        with open("auth", "w", encoding="utf-8") as file:
            file.write(AUTH_FILE_TEMPLATE.format(r_token))
    except IOError:
        print("Something went wrong while saving refresh token. Skipping.")

    return await User.from_token(client, token, r_token)


def sort_key(track: Track) -> Tuple[str, str, int]:
    """Key function for Playlist.sort."""
    album_name = track.album.name.lower()
    artist_name = track.artists[0].name.lower()
    t_number = track.track_number

    return (artist_name, album_name, t_number)


async def main():
    # pylint: disable=missing-function-docstring, undefined-loop-variable
    async with Client(CLIENT_ID, CLIENT_SECRET) as client:
        user = await do_authorization_flow(client)

    print(f"Authorized as {user.display_name}\n")

    playlist_uri = input("Enter playlist URI: ").strip()

    for playlist in await user.get_all_playlists():
        if playlist.uri == playlist_uri:
            break
    else:
        print("Playlist not found.")
        return

    try:
        await playlist.sort(key=sort_key)
    except HTTPException as exc:
        if exc.status == 400:
            print(
                "Sorting failed most likely due to a local track "
                "in the playlist.\nSupport for local tracks will be added "
                "once Spotify fixes their API."
            )
            return

    print(f"Reordered {len(playlist)} tracks.")


if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())
    loop.close()
